name: Process Weather Data

on:
  schedule:
    - cron: '30 */6 * * *'   # Run every 6 hours
  workflow_dispatch:

permissions:
  contents: write

jobs:
  process-grib-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin python3-gdal curl jq
          gdalinfo --version
          
      - name: Get current GFS run info
        id: gfs-info
        run: |
          CURRENT_HOUR=$(date -u +%H)
          if [ $CURRENT_HOUR -ge 21 ]; then
            GFS_RUN="18"
            GFS_DATE=$(date -u +%Y%m%d)
          elif [ $CURRENT_HOUR -ge 15 ]; then
            GFS_RUN="12"
            GFS_DATE=$(date -u +%Y%m%d)
          elif [ $CURRENT_HOUR -ge 9 ]; then
            GFS_RUN="06"
            GFS_DATE=$(date -u +%Y%m%d)
          elif [ $CURRENT_HOUR -ge 3 ]; then
            GFS_RUN="00"
            GFS_DATE=$(date -u +%Y%m%d)
          else
            GFS_RUN="18"
            GFS_DATE=$(date -u -d "yesterday" +%Y%m%d)
          fi
          echo "gfs_date=$GFS_DATE" >> $GITHUB_OUTPUT
          echo "gfs_run=$GFS_RUN" >> $GITHUB_OUTPUT

      - name: Download GFS GRIB data
        run: |
          GFS_DATE=${{ steps.gfs-info.outputs.gfs_date }}
          GFS_RUN=${{ steps.gfs-info.outputs.gfs_run }}
          mkdir -p raw-data
          cd raw-data
          
          download_with_fallback() {
            local var_name=$1
            local lev_name=$2
            local output_file=$3
            local current_date=$GFS_DATE
            local current_run=$GFS_RUN
            for attempt in 1 2 3; do
              if curl -f -o "$output_file" \
                "https://nomads.ncep.noaa.gov/cgi-bin/filter_gfs_0p25.pl?file=gfs.t${current_run}z.pgrb2.0p25.f000&var_${var_name}=on&lev_${lev_name}=on&dir=%2Fgfs.${current_date}%2F${current_run}%2Fatmos"; then
                return 0
              fi
              if [ "$current_run" = "18" ]; then
                current_run="12"
              elif [ "$current_run" = "12" ]; then
                current_run="06"
              elif [ "$current_run" = "06" ]; then
                current_run="00"
              else
                current_date=$(date -u -d "${current_date:0:4}-${current_date:4:2}-${current_date:6:2} - 1 day" +%Y%m%d)
                current_run="18"
              fi
            done
            return 1
          }
          
          # Wind
          download_with_fallback "UGRD" "10_m_above_ground" "wind_u_current.grib"
          download_with_fallback "VGRD" "10_m_above_ground" "wind_v_current.grib"
          # Cloud
          download_with_fallback "TCDC" "entire_atmosphere" "cloud_current.grib"
          # Temperature
          download_with_fallback "TMP" "2_m_above_ground" "temp_current.grib"
          # Reflectivity
          download_with_fallback "REFC" "entire_atmosphere" "reflectivity_current.grib"

      - name: Process GRIB to WeatherLayers format
        run: |
          cd raw-data
          GFS_DATE=${{ steps.gfs-info.outputs.gfs_date }}
          GFS_RUN=${{ steps.gfs-info.outputs.gfs_run }}
          
          # Wind
          if [[ -f "wind_u_current.grib" && -f "wind_v_current.grib" ]]; then
            gdalbuildvrt -separate "wind_current.vrt" "wind_u_current.grib" "wind_v_current.grib" "wind_v_current.grib"
            gdal_translate -ot Float32 -scale 0 255 -of PNG "wind_current.vrt" "../processed-data/wind_${GFS_DATE}_${GFS_RUN}z.png"
          fi
          
          # Cloud
          if [[ -f "cloud_current.grib" ]]; then
            gdal_translate -ot Float32 -scale 0 100 0 255 -of PNG "cloud_current.grib" "../processed-data/cloud_${GFS_DATE}_${GFS_RUN}z.png"
          fi
          
          # Temperature
          if [[ -f "temp_current.grib" ]]; then
            gdal_translate -ot Float32 -scale 0 255 -of PNG "temp_current.grib" "../processed-data/temp_${GFS_DATE}_${GFS_RUN}z.png"
          fi
          
          # Reflectivity
          if [[ -f "reflectivity_current.grib" ]]; then
            gdal_translate -ot Float32 -scale 0 255 -of PNG "reflectivity_current.grib" "../processed-data/reflectivity_${GFS_DATE}_${GFS_RUN}z.png"
          fi

      - name: Generate metadata
        run: |
          GFS_DATE=${{ steps.gfs-info.outputs.gfs_date }}
          GFS_RUN=${{ steps.gfs-info.outputs.gfs_run }}
          cat > processed-data/metadata_${GFS_DATE}_${GFS_RUN}z.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "gfs_date": "${GFS_DATE}",
            "gfs_run": "${GFS_RUN}",
            "forecast_hour": "000",
            "bounds": [-180, -90, 180, 90],
            "layers": {
              "wind": {
                "file": "wind_${GFS_DATE}_${GFS_RUN}z.png",
                "type": "vector",
                "units": "m/s",
                "range": [-30, 30],
                "encoding": "RG channels, 128=0 m/s, scale 0-255"
              },
              "cloud": {
                "file": "cloud_${GFS_DATE}_${GFS_RUN}z.png",
                "type": "raster",
                "units": "%",
                "range": [0, 100],
                "encoding": "0=clear sky, 255=overcast"
              },
              "temperature": {
                "file": "temp_${GFS_DATE}_${GFS_RUN}z.png",
                "type": "raster",
                "units": "°C",
                "range": [-40, 50],
                "encoding": "scaled 0-255 from -40°C to +50°C"
              },
              "reflectivity": {
                "file": "reflectivity_${GFS_DATE}_${GFS_RUN}z.png",
                "type": "raster",
                "units": "dBZ",
                "range": [0, 70],
                "encoding": "scaled 0-255 from 0–70 dBZ"
              }
            }
          }
          EOF

      - name: Clean up old processed data (keep last 7 days)
        run: |
          CUTOFF_DATE=$(date -u -d "7 days ago" +%Y%m%d)
          DELETED_COUNT=0
          while IFS= read -r file; do
            filename=$(basename "$file")
            if [[ $filename =~ ([0-9]{8}) ]]; then
              file_date="${BASH_REMATCH[1]}"
              if [[ $file_date -le $CUTOFF_DATE ]]; then
                rm -f "$file" || true
                DELETED_COUNT=$((DELETED_COUNT+1))
              fi
            fi
          done < <(find processed-data/ -type f \( -name "*.png" -o -name "*.json" -o -name "*.aux.xml" \))
          rm -rf raw-data/ || true
          echo "Cleanup completed. Total files deleted: $DELETED_COUNT"

      - name: Commit and push processed data
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add processed-data/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update weather data: $(date -u +%Y-%m-%d_%H:%M)Z"
            git push
          fi

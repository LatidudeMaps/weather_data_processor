name: Process Weather Data

on:
  schedule:
    - cron: '30 */6 * * *'   # Run every 6 hours
  workflow_dispatch:

permissions:
  contents: write

jobs:
  process-grib-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin python3-gdal curl jq python3-pip
          pip3 install requests numpy
          gdalinfo --version
          
      - name: Get current GFS run info
        id: gfs-info
        run: |
          # Get current date and determine the latest available GFS run
          # GFS data is usually available 3-4 hours after model run time
          CURRENT_HOUR=$(date -u +%H)
          
          # Account for GFS data availability delay (usually 3-4 hours)
          if [ $CURRENT_HOUR -ge 21 ]; then
            GFS_RUN="18"
            GFS_DATE=$(date -u +%Y%m%d)
          elif [ $CURRENT_HOUR -ge 15 ]; then
            GFS_RUN="12"
            GFS_DATE=$(date -u +%Y%m%d)
          elif [ $CURRENT_HOUR -ge 9 ]; then
            GFS_RUN="06"
            GFS_DATE=$(date -u +%Y%m%d)
          elif [ $CURRENT_HOUR -ge 3 ]; then
            GFS_RUN="00"
            GFS_DATE=$(date -u +%Y%m%d)
          else
            # Use previous day's 18Z run
            GFS_RUN="18"
            GFS_DATE=$(date -u -d "yesterday" +%Y%m%d)
          fi
          
          echo "gfs_date=$GFS_DATE" >> $GITHUB_OUTPUT
          echo "gfs_run=$GFS_RUN" >> $GITHUB_OUTPUT
          echo "Processing GFS data for date: $GFS_DATE, run: ${GFS_RUN}Z"

      - name: Download GFS GRIB data
        run: |
          GFS_DATE=${{ steps.gfs-info.outputs.gfs_date }}
          GFS_RUN=${{ steps.gfs-info.outputs.gfs_run }}
          
          # Create directory for raw data
          mkdir -p raw-data
          cd raw-data
          
          echo "Downloading current GFS data for ${GFS_DATE}/${GFS_RUN}Z"
          
          # Function to try downloading with fallback to previous runs
          download_with_fallback() {
            local var_name=$1
            local lev_name=$2
            local output_file=$3
            local current_date=$GFS_DATE
            local current_run=$GFS_RUN
            
            # Try current run first
            for attempt in 1 2 3; do
              echo "Attempt $attempt: Downloading ${var_name} for ${current_date}/${current_run}Z..."
              if curl -f -o "$output_file" \
                "https://nomads.ncep.noaa.gov/cgi-bin/filter_gfs_0p25.pl?file=gfs.t${current_run}z.pgrb2.0p25.f000&var_${var_name}=on&lev_${lev_name}=on&dir=%2Fgfs.${current_date}%2F${current_run}%2Fatmos"; then
                echo "Successfully downloaded ${var_name}"
                return 0
              fi
              
              # Fallback to previous run
              if [ "$current_run" = "18" ]; then
                current_run="12"
              elif [ "$current_run" = "12" ]; then
                current_run="06"
              elif [ "$current_run" = "06" ]; then
                current_run="00"
              else
                # Go to previous day's 18Z
                current_date=$(date -u -d "${current_date:0:4}-${current_date:4:2}-${current_date:6:2} - 1 day" +%Y%m%d)
                current_run="18"
              fi
              echo "Trying fallback: ${current_date}/${current_run}Z"
            done
            
            echo "Failed to download ${var_name} after all attempts"
            return 1
          }
          
          # Download U component of wind at 10m above ground
          download_with_fallback "UGRD" "10_m_above_ground" "wind_u_current.grib"
          
          # Download V component of wind at 10m above ground  
          download_with_fallback "VGRD" "10_m_above_ground" "wind_v_current.grib"
          
          # Download temperature at 2m above ground
          download_with_fallback "TMP" "2_m_above_ground" "temp_current.grib"
          
          # Download total cloud cover
          download_with_fallback "TCDC" "entire_atmosphere" "cloud_current.grib"
          
          # Download composite reflectivity
          download_with_fallback "REFC" "entire_atmosphere" "reflectivity_current.grib"
          
          # List downloaded files
          echo "Files downloaded:"
          ls -la *.grib 2>/dev/null || echo "No GRIB files downloaded"

      - name: Process GRIB to WeatherLayers format
        run: |
          #!/bin/bash
          set -e
          
          gfs_date="${{ steps.gfs-info.outputs.gfs_date }}"
          gfs_run="${{ steps.gfs-info.outputs.gfs_run }}"
          
          mkdir -p processed-data
          
          # Wind processing: Create 3-band VRT (R=U, G=V, B=V) then scale to Byte
          echo "Processing wind data..."
          gdalbuildvrt -separate processed-data/wind_temp.vrt raw-data/wind_u_current.grib raw-data/wind_v_current.grib raw-data/wind_v_current.grib
          
          gdal_translate -ot Byte -scale -128 127 0 255 -of PNG processed-data/wind_temp.vrt processed-data/wind_${gfs_date}_${gfs_run}z.png
          rm processed-data/wind_temp.vrt
          
          # Temperature processing: Scale Celsius values to Byte
          echo "Processing temperature data..."
          gdal_translate -ot Byte -scale -60 52 0 255 -of PNG raw-data/temp_current.grib processed-data/temp_${gfs_date}_${gfs_run}z.png
          
          # Cloud cover processing: Scale percentage to Byte (use semantic 0-100 range)
          echo "Processing cloud cover data..."
          gdal_translate -ot Byte -scale 0 100 0 255 -of PNG raw-data/cloud_current.grib processed-data/cloud_${gfs_date}_${gfs_run}z.png
          
          # Reflectivity processing: Scale observed range to Byte
          echo "Processing reflectivity data..."
          gdal_translate -ot Byte -scale 0 60 0 255 -of PNG raw-data/reflectivity_current.grib processed-data/reflectivity_${gfs_date}_${gfs_run}z.png
          
          # Verify all outputs are Byte format
          echo "=== OUTPUT VERIFICATION ==="
          for file in processed-data/*.png; do
            info=$(gdalinfo "$file" | grep "Type=")
            echo "$(basename $file): $info"
          done

      - name: Clean up old processed data (keep last 365 days)
        run: |
          #!/bin/bash
          # Remove processed data files older than 365 days
          find processed-data -name "*.png" -mtime +365 -delete || true
          
          # Clean up temp directories
          rm -rf raw-data

      - name: Commit and push processed data
        run: |
          #!/bin/bash
          set -e
          
          gfs_date="${{ steps.gfs-info.outputs.gfs_date }}"
          gfs_run="${{ steps.gfs-info.outputs.gfs_run }}"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add processed files
          git add processed-data/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Commit with descriptive message
          git commit -m "Add weather data for ${gfs_date} ${gfs_run}Z
          
          # Push changes
          git push
          
          echo "âœ… Successfully processed and committed weather data for ${gfs_date} ${gfs_run}Z"
